o link the three Angular features — Session Management, Votes Management, and User Stories Management — into one cohesive Poker Planning App, you’ll need:

✅ 1. App Structure (Modularized by Feature)
Use Angular 19 standalone components and group features by responsibility:

pgsql
Copy
Edit
src/
├── app/
│   ├── session/
│   │   ├── create-session.component.ts
│   │   ├── join-session.component.ts
│   │   ├── session.component.ts  ← Main poker planning view
│   ├── voting/
│   │   └── vote-manager.component.ts
│   ├── stories/
│   │   └── user-stories.component.ts
│   ├── shared/
│   │   └── session.service.ts
│   └── app.routes.ts
✅ 2. Compose Components Inside session.component.ts
The SessionComponent becomes the main view for a poker planning session, where you bring together:

UserStoriesComponent (for adding/removing stories)

VoteManagerComponent (for voting on stories)

Plus anything else (chat, timer, etc.)

📄 session.component.ts
ts
Copy
Edit
import { Component } from '@angular/core';
import { UserStoriesComponent } from '../stories/user-stories.component';
import { VoteManagerComponent } from '../voting/vote-manager.component';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-session',
  standalone: true,
  imports: [CommonModule, UserStoriesComponent, VoteManagerComponent],
  template: `
    <h2>Planning Session</h2>
    <app-user-stories></app-user-stories>
    <app-vote-manager></app-vote-manager>
  `
})
export class SessionComponent {}
✅ 3. Define Routes in app.routes.ts
ts
Copy
Edit
import { Routes } from '@angular/router';
import { CreateSessionComponent } from './session/create-session.component';
import { JoinSessionComponent } from './session/join-session.component';
import { SessionComponent } from './session/session.component';
import { DestroyConfirmationComponent } from './session/destroy-confirmation.component';

export const routes: Routes = [
  { path: '', component: CreateSessionComponent },
  { path: 'join/:sessionId', component: JoinSessionComponent },
  { path: 'session/:sessionId', component: SessionComponent },
  { path: 'destroyed', component: DestroyConfirmationComponent }
];
✅ 4. Share Session Data via SessionService
The SessionService acts as your app state manager, shared by all components:

📦 session.service.ts (Enhanced)
ts
Copy
Edit
@Injectable({ providedIn: 'root' })
export class SessionService {
  private sessionId: string | null = null;
  private userStories: UserStory[] = [];
  private votes: Vote[] = [];

  setSessionId(id: string) {
    this.sessionId = id;
  }

  getSessionId() {
    return this.sessionId;
  }

  getStories() {
    return this.userStories;
  }

  addStory(story: UserStory) {
    this.userStories.push(story);
  }

  removeStory(id: string) {
    const index = this.userStories.findIndex(s => s.id === id && s.status === 'PENDING');
    if (index !== -1) this.userStories.splice(index, 1);
  }

  updateStoryStatus(id: string, status: StoryStatus) {
    const story = this.userStories.find(s => s.id === id);
    if (story) story.status = status;
  }

  // Voting logic here...
}
Use this service in both UserStoriesComponent and VoteManagerComponent to stay in sync.

✅ 5. Connect Components to Shared Data
In UserStoriesComponent:

ts
Copy
Edit
constructor(private sessionService: SessionService) {}

addStory() {
  // Add to service
  this.sessionService.addStory({
    id: this.storyForm.value.id!,
    description: this.storyForm.value.description!,
    status: 'PENDING'
  });
}
In VoteManagerComponent:

ts
Copy
Edit
stories = this.sessionService.getStories();
✅ Optional Enhancements
Use BehaviorSubject in SessionService for reactive updates.

Add WebSocket/Firebase support for multi-user sync.

Use Angular Material or Tailwind for better UI/UX.

✅ Summary
Feature	Component	Integrated In
Session management	create-session, join-session, session	Root + Routing
User story CRUD	user-stories.component.ts	Inside SessionComponent
Voting system	vote-manager.component.ts	Inside SessionComponent
Shared state	session.service.ts	Used across all

Let me know if you'd like a GitHub-style project folder zipped or a backend (Node.js or Firebase) added next.




